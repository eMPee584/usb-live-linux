name: build-FSFW-Schulstick-ISO

# trigger building
on:
  # when a release is tagged
  push:
    tags:
      - '*'

  # every day at 23:42 UTC
  #schedule:
    #- cron: "42 23 * * *"

jobs:
  summon:
    runs-on: ubuntu-latest
    steps:
    # this gives live ssh debugging capability
    - name: get some tools
      run: |
        sudo apt install speedometer iotop iftop fatrace ranger ncdu nmon tig
    #- name: Setup tmate session
      #uses: mxschmitt/action-tmate@v2
    - uses: actions/checkout@v2
    - name: set up build prerequisites (i.e. beat the ubuntu with a bent spoon)
      run: |
        # add debian repo, fetch keys and update apt database
        echo "deb http://ftp.debian.org/debian stable main" | sudo tee /etc/apt/sources.list.d/debian-stable.list
        sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 04EE7237B7D453EC 648ACFD622F3D138 DCC9EFBF77E11517
        sudo apt update

        # give debian stable repo highest priority
        {
          echo "Package: *"
          echo "Pin: release a=stable, o=Debian"
          echo "Pin-Priority: 1110"
        } | sudo tee /etc/apt/preferences.d/debian-stable

        #sudo mkdir -pv /etc/dpkg/dpkg.cfg.d
        #echo "force-overwrite" | sudo tee /etc/dpkg/dpkg.cfg.d/force-overwrite

        # kill the ubuntu grub stuff
        sudo dpkg --remove shim-signed shim-helpers-amd64-signed shim-unsigned shim-signed:amd64
        apt-cache policy grub-efi-amd64-bin grub-efi-amd64-signed shim-helpers-amd64-signed shim-unsigned shim-signed:amd64 squashfs-tools

        # get all the grub packages from debian
        time sudo apt --allow-downgrades --verbose-versions install debootstrap rsync pandoc debian-archive-keyring pigz python3-pip grub-pc-bin grub-efi-amd64-bin grub-efi-amd64-signed grub-efi-ia32-bin shim-signed grub-rescue-pc syslinux-common parted fatattr dosfstools f2fs-tools libcdio-utils dialog ccze

        # install a mksquashfs with zstd capability
        wget http://archive.ubuntu.com/ubuntu/pool/main/s/squashfs-tools/squashfs-tools_4.4-1_amd64.deb
        sudo dpkg -i *.deb

        # get the fresh live-build magic
        git clone https://salsa.debian.org/live-team/live-build.git
        cd live-build
        # unlock zstd mksquashfs power
        sed -i 's/comp xz/comp zstd/' scripts/build/binary_rootfs
        sudo make install
    - name: nuke free some storage space in container
      run: |
        sudo swapoff /swapfile && sudo rm /swapfile
        sudo rm -rf /usr/share/dotnet /usr/local/lib/android /opt/ghc
        df -h $(pwd) /mnt
    - name: cache the packages
      id: cache-packages
      uses: actions/cache@v1
      with:
        path: cache
        key: ${{ runner.os }}.packages.cache
    - name: build ISO
      run: |
        sudo bash -xv scripts/build-live-system.sh FSFW-Schulstick
        echo ::set-env name=ISO::$(cd iso-images; command ls -tr *.iso|tail -n 1)
        echo ::set-env name=BUILDLOG::$(command ls build*.log)
        df -h $(pwd) /mnt
    - name: release ISO
      uses: ncipollo/release-action@v1
      with:
        artifacts: iso-images/${{env.ISO}}
        token: ${{ secrets.GITHUB_TOKEN }}
        draft: true
        #name: ''
        prerelease: true
        allowUpdates: true
    - name: store build log as job artifact
      uses: actions/upload-artifact@v1
      with:
        name: build.log
        path: ${{env.BUILDLOG}}
    #- name: fake ISO
      #run: |
        #mkdir -pv iso-images
        #echo foo > iso-images/foo.iso
        #cp -av /usr/lib/grub-rescue/grub-rescue-cdrom.iso iso-images/foo.iso
        #echo ::set-env name=ISO::$(cd iso-images; command ls -tr *.iso|tail -n 1)
        #df -h $(pwd) /mnt
    #- name: store ISO as job artifact
      #uses: actions/upload-artifact@v1
      #with:
        #name: ${{env.ISO}}
        #path: iso-images/${{env.ISO}}
    - name: glue up IMG
      run: |
        # need the j2 command to process the grub.cfg.j2
        sudo pip3 install j2cli

        # this should produce a special crafted USB stick image in /mnt
        sudo bash -xv scripts/img-create-schulstick.sh iso-images/${{env.ISO}} "/mnt"

        # get the image name
        IMG=$(cd /mnt; command ls -tr *.img|tail -n 1)
        # also, export the ISO file name to job env
        echo ::set-env name=IMG::$(cd /mnt; command ls -tr *.img|tail -n 1)

        # we want more space for shunting
        [ ! -d chroot ] || sudo rm -rf chroot

        # now multi-core gzip the image to create the release product
        sudo time pigz --stdout < /mnt/${IMG} > ${IMG}.gz
        ls -lah . /mnt
        df -h $(pwd) /mnt
    #- name: store IMG as job artifact
      #uses: actions/upload-artifact@v1
      #with:
        #name: ${{env.IMG}}
        #path: /mnt/${{env.IMG}}
    - name: release IMG
      uses: ncipollo/release-action@v1
      with:
        artifacts: ${{env.IMG}}.gz
        token: ${{ secrets.GITHUB_TOKEN }}
        draft: true
        #name: ''
        prerelease: true
        allowUpdates: true
