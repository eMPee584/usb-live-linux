name: build-FSFW-Schulstick-ISO

# when to trigger building
on:
  # publish when a release is tagged
  push:
    tags:
      - '*'

  # every day at 23:42 UTC
  #schedule:
    #- cron: "42 23 * * *"

jobs:
  summon:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: set up build prerequisites
      run: |
        echo "deb http://ftp.debian.org/debian stable main" | sudo tee /etc/apt/sources.list.d/debian-stable.list
        sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 04EE7237B7D453EC 648ACFD622F3D138 DCC9EFBF77E11517
        sudo apt update
        #sudo apt list --upgradable
        {
          echo "Package: *"
          echo "Pin: release a=stable, o=Debian"
          echo "Pin-Priority: 1110"
        } | sudo tee /etc/apt/preferences.d/debian-stable
        sudo mkdir -pv /etc/dpkg/dpkg.cfg.d
        echo "force-overwrite" | sudo tee /etc/dpkg/dpkg.cfg.d/force-overwrite
        apt-cache policy grub-efi-amd64-bin grub-efi-amd64-signed shim-helpers-amd64-signed shim-unsigned shim-signed:amd64 squashfs-tools
        time sudo apt --allow-downgrades --verbose-versions install debootstrap rsync pandoc debian-archive-keyring pigz python3-pip grub-pc-bin grub-efi-amd64-bin grub-efi-amd64-signed grub-efi-ia32-bin shim-signed grub-rescue-pc syslinux-common parted fatattr dosfstools f2fs-tools libcdio-utils dialog ccze
        wget http://archive.ubuntu.com/ubuntu/pool/main/s/squashfs-tools/squashfs-tools_4.4-1_amd64.deb
        sudo dpkg -i *.deb
        git clone https://salsa.debian.org/live-team/live-build.git
        cd live-build
        sed -i 's/comp xz/comp zstd/' scripts/build/binary_rootfs
        sudo make install
        # this worked?
        grep "comp" /usr/lib/live/build/binary_rootfs
    #- name: nuke free some storage space in container
      #run: |
        ## sudo swapoff /swapfile && sudo rm /swapfile
        #sudo rm -rf /usr/share/dotnet /usr/local/lib/android /opt/ghc
        #df -h $(pwd)
    - name: build ISO
      run: |
        sudo bash -xv scripts/build-live-system.sh TEST-Ministick
        echo ::set-env name=ISO::$(cd iso-images; command ls -tr *.iso|tail -n 1)
        echo ::set-env name=BUILDLOG::$(command ls build*.log)
        df -h $(pwd) /mnt
    - name: publish build log as well
      uses: actions/upload-artifact@v1
      with:
        name: build.log
        path: ${{env.BUILDLOG}}
    #- name: fake ISO
      #run: |
        #mkdir -pv iso-images
        #echo foo > iso-images/foo.iso
        #cp -av /usr/lib/grub-rescue/grub-rescue-cdrom.iso iso-images/foo.iso
        #echo ::set-env name=ISO::$(cd iso-images; command ls -tr *.iso|tail -n 1)
        #df -h $(pwd) /mnt
    #- name: publish ISO as artifact
      #uses: actions/upload-artifact@v1
      #with:
        #name: ${{env.ISO}}
        #path: iso-images/${{env.ISO}}
    - name: build IMG
      run: |
        sudo pip3 install j2cli
        sudo bash -xv scripts/img-create-schulstick.sh iso-images/${{env.ISO}} "/mnt"
        echo ::set-env name=IMG::$(cd /mnt; command ls -tr *.img|tail -n 1)
        sudo time pigz /mnt/*.img
        echo ::set-env name=IMGGZ::$(cd /mnt; command ls -tr *.img.gz|tail -n 1)
        df -h $(pwd) /mnt
    #- name: publish IMG as artifact
      #uses: actions/upload-artifact@v1
      #with:
        #name: ${{env.IMG}}
        #path: /mnt/${{env.IMG}}
    - name: release ISO and IMG
      uses: ncipollo/release-action@v1
      with:
        artifacts: iso-images/${{env.ISO}},/mnt/${{env.IMG}},/mnt/${{env.IMGGZ}}
        token: ${{ secrets.GITHUB_TOKEN }}
        draft: true
        name: 'maybe-build'
        prerelease: true
        allowUpdates: true
