#!/bin/bash +x

# exit on error
set -e

. "$(dirname $(realpath "${0}"))/functions.sh"
. "$(dirname $(realpath "${0}"))/functions.bash"
cd_repo_root

# give some rudimentary help if requested
case "${1}" in
    "-h")
        ;&
    "--help")
        print_info "usage is ${0} [BUILD_VARIANT]"
        print_info "If given, BUILD_VARIANT must match a sub-folder or symlink in variants/"
        exit
        ;;
esac

select_build_variant() {
    shopt -s extglob
    OPTIONS=()
    for VAR in $(command ls -Ltd variants/!(active|base_*|shared)/)
    do
        NUMFILES=$(find "${VAR}" -type f -printf x | wc -c)
        # THANKS https://stackoverflow.com/questions/4561895/how-to-recursively-find-the-latest-modified-file-in-a-directory
        NEWESTFILE=$(find ${VAR} -type f -printf '%T@ %p\n'|sort -n|tail -n 1|cut -d" " -f2-)
        [ -z "${NEWESTFILE}" ] && CHANGESTR="" || CHANGESTR=", last changed $(rel_fmt_low_precision $(stat --format='@%Y' "${NEWESTFILE}"))"
        OPTIONS+=(${VAR#variants/} "(${NUMFILES} files${CHANGESTR})")
    done
    TEXT="Please choose the variant to build. (Variants named base_* or shared are not listed)"
    TITLE="SELECT LIVE SYSTEM BUILD VARIANT"
    display_menu "${TITLE}" "${TEXT}" "${OPTIONS[@]}"
}

# if an 'active' symlink exists, parse that (DEPRECATED)
[ -e variants/active ] && BUILD_VARIANT=$(readlink variants/active)

# if a BUILD_VARIANT is given as parameter, prefer that
[ -n "${1}" ] && BUILD_VARIANT=$1

# if neither, query user to visually select a variant
[ -n "${BUILD_VARIANT}" ] || BUILD_VARIANT=$(select_build_variant)

# chop off possible trailing slash and expose variable to sub processes
export BUILD_VARIANT=${BUILD_VARIANT%/}

# Clear selection dialog from screen
clear

echo "Live-Stick ${0} ${BUILD_VARIANT}" 

# ensure the directory exists
[ -d "variants/${BUILD_VARIANT}" ] || { print_warn "given BUILD_VARIANT=${BUILD_VARIANT} does not exist" >&2 && exit 1; }

if [ "$(id -u)" != "0" ]; then
    print_warn "ERROR: no super-user privilege, please run as root or with sudo."
    print_warn "Running this script without sudo is not supported anymore!"
    exit 3
fi

print_info "Available live-build versions:"
time apt policy live-build
print_info "Using live-build $(lb --version), lb command is $(type lb)"

# FIXME - HACK: modify build script to unlock zstd mksquashfs power
sed -i 's/comp xz/comp zstd/' /usr/lib/live/build/binary_rootfs

STARTTIME=$(date +%s)

(
    # build in an appropriate sub-folder
    cd build

    # clean up live-build environment using auto/clean script
    print_info "Triggering build area clean-up.."
    lb clean

    # generate live-build config/ from features of specified variant
    print_info "Collecting build features for ${BUILD_VARIANT}.."
    lb_config_tree_from_features ../variants/${BUILD_VARIANT}

    # have live-build complete its config
    print_info "Let live-build finalize its configuration"
    lb config

    # Trigger image build
    print_info "Firing build process, fasten seatbelts.. it is $(date '+%F %H:%M') now."
    lb build &&
    {
        print_info "Building ISO SUCCEEDED"

        # Ensure artifacts dir exists
        mkdir -p ../artifacts

        # and move generated files there
        mv -iv "${BUILD_VARIANT}"*.* ../artifacts/
    } || print_warn "FAILED"
)

print_info "this took $(format_timespan $(($(date +%s) - ${STARTTIME}))) and the work of many"
