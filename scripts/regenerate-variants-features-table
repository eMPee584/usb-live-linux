#!/bin/bash
# This script uses asciidoc to regenerate the features table at variants.build/index.html

. "$(dirname $(realpath "${0}"))/functions.sh"
. "$(dirname $(realpath "${0}"))/functions.bash"
cd_repo_root

# abort on error
set -e

STARTTIME=$(date +%s)
TARGET="variants.build/features.adoc"

print_info "Regenerating ${TARGET} and rendering to ${TARGET%.adoc}.html"

cat > ${TARGET} <<ETX
= Features, features, build variants.. ðŸš§ as of $(date +%F)
:table-caption!:

++++
<style>
/* Floating Header */
thead th:first-child,
thead th:last-child,
tbody tr:first-child td { position: -webkit-sticky; position: sticky; top: 0; }

thead th:first-child,
thead th:last-child,
tbody tr:first-child td { background-color: white; background-clip: padding-box; box-shadow: 0 1px; }

tbody tr:first-child td:first-child,
tbody tr:first-child td:last-child { background-color: unset; box-shadow: unset; }

/* Rotated Variants */
tbody tr:first-child td p { writing-mode: vertical-rl; transform: rotate(-180deg); margin: 0.2em; }

/* Limit check mark width */
tbody td { max-width: 2em; }
tbody td:first-child, tbody td:last-child { max-width: unset; }

/* No Underlining of Links */
tbody tr:first-child a,
tbody td:first-child a { text-decoration: none; }
a:visited { color: darkblue; }

/* Slick Looks */
tbody tr:nth-child(even) { background-color: #eee }
tbody td { line-height: 1em; }
body { margin: 1em; }
</style>

<script type="text/javascript">
// Workaround CSS layout glitch with writing-mode .. trigger re-layout for correct header margins
document.addEventListener("DOMContentLoaded", function() {
  document.querySelectorAll('tbody > tr:first-child td p').forEach((headerCell) => {
    headerCell.style.margin = '0.23em';
  });
});
</script>
++++

Definitions used in this https://github.com/fsfw-dresden/usb-live-linux[usb-live-linux] build framework:

- Feature: a distinct functional fragment
- (Build) Variant: assembly of features, yielding in a complete live system image

== Build Variants can derive from others, inheriting their features

[graphviz, build-variant-inheritance.png, dot]
-------
digraph build_variants {
  splines=curved;
  node [
    shape = box,
    style = rounded
  ];
  edge [
    arrowhead = empty
  ];
ETX

shopt -s extglob
for INHERIT in variants.build/*/inherit/*
do
  DEST=$(basename ${INHERIT})
  INHERIT=${INHERIT##variants.build/}
  SOURCE=${INHERIT%%/*}
  printf "  \"${SOURCE}\" -> \"${DEST}\" [ xlabel = \"based on\" ];\n" >> ${TARGET}
done

cat >> ${TARGET} <<ETX
}
-------

== Which features are enabled in various stick build variants?

- â€‚: feature is not included in this variant
- âœ”: feature is enabled in this variant
- (âœ”): feature is included implicitly as dependency of another feature
- âœ”!: feature is exclusive to this variant
- âœ˜: feature is disabled in this variant
- FIXME: features included by parent variant not yet displayed, consult above graph
ETX

# Assemble sub-header row (VARIANT_LINE)
VARIANT_COUNT=0
VARIANT_LINE="|\t\t\t\t"
print_info "finding build variants to crawl.."
for VARIANT in variants.build/*/
do
  VARIANT_NAME=$(basename ${VARIANT})
  [[ "${VARIANT_NAME}" == "shared" ]] && continue
  echo "adding ${VARIANT}, variant count = $((++VARIANT_COUNT))"
  # FIXME: ugly absolute URL, because of GitCDN workaround
  VARIANT_URL="https://github.com/fsfw-dresden/usb-live-linux/tree/master/variants.build/${VARIANT_NAME}"
  VARIANT_LINE="${VARIANT_LINE}\t.>s|link:${VARIANT_URL}[${VARIANT_NAME//:/ }]"
done
VARIANT_LINE="${VARIANT_LINE}\t|"

printf '[cols=">.^,' >> ${TARGET}
printf ${VARIANT_COUNT} >> ${TARGET}
cat >> ${TARGET} <<ETX
*^.^,<.^", options="header,autowidth", frame="none", grid="all"]
|====
ETX
printf '^|feature ' >> ${TARGET}
printf ${VARIANT_COUNT} >> ${TARGET}
cat >> ${TARGET} <<ETX
+^|variant ^|description
ETX

printf "${VARIANT_LINE}\n" >> ${TARGET}

print_info "Searching for feature inclusion across build variants.."
# sorting paths by basename? hell yeah xD
# https://unix.stackexchange.com/questions/393987/sort-an-array-of-pathnames-of-files-by-their-basenames/638463#638463
for FEATURE in $(command ls -d features/*/ variants.build/*/features/*/ | sed -re 's/^(.*)(\/.+)$/\2\t\1\2/' | sort | sed -re 's/^.+\t(.*)$/\1/; s#/$##')
do
  FEATURE_NAME=$(basename ${FEATURE})

  # don't duplicate print linked features
  [ -h "${FEATURE%/}" ] && [[ "${FEATURE}" =~ variants.build/[^/]+/features/${FEATURE_NAME} ]] && continue

  # hide install_ features from build variants table
  [[ "${FEATURE_NAME}" =~ ^install_.* ]] && continue

  # FIXME: ugly absolute URL, because of GitCDN workaround
  FEATURE_URL="https://github.com/fsfw-dresden/usb-live-linux/tree/master/${FEATURE}"
  printf "|link:${FEATURE_URL}[${FEATURE_NAME}]" >> ${TARGET}
  for VARIANT in variants.build/*/
  do
    VARIANT_NAME=$(basename ${VARIANT})
    VARIANT=${VARIANT%/}

    [[ "${VARIANT_NAME}" == "shared" ]] && continue

    #ls -lah ${VARIANT}/features/*/depends/${FEATURE_NAME}
    if [ -h ${VARIANT}/features/${FEATURE_NAME} ]
    then
      # feature linked from common features folder
      printf "\t|âœ”" >> ${TARGET}
    elif [ -d ${VARIANT}/features/${FEATURE_NAME} ]
    then
      # private feature of the variant
      printf "\t|âœ”!" >> ${TARGET}
    elif [ -e ${VARIANT}/features/${FEATURE_NAME}.disabled ]
    then
      # feature disabled in variant
      printf "\t|âœ˜" >> ${TARGET}
    else
      # check if is included indirectly / as dependency
      FEATURE_DEPENDENCY_FOUND=0
      for DEPENDENCY in $(command ls -d ${VARIANT}/features/*/depends/${FEATURE_NAME} 2>/dev/null | cat)
      do
        if [[ ${DEPENDENCY} =~ \.disabled ]]
        then
          echo "skipping ${DEPENDENCY}"
          continue
        else
          echo "implicit dependency ${DEPENDENCY} found"
          FEATURE_DEPENDENCY_FOUND=$((FEATURE_DEPENDENCY_FOUND + 1))
        fi
      done

      if [ ${FEATURE_DEPENDENCY_FOUND} -gt 0 ]
      then
        printf "\t|(âœ”) " >> ${TARGET}
      else
        # not existant
        printf "\t| " >> ${TARGET}
      fi
    fi
  done
  FEATURE_METADATA="${FEATURE}/metadata"
  FEATURE_DESCRIPTION=$([ ! -e ${FEATURE_METADATA} ] || sed -nr 's/description-en: *(.*)/\1/p' ${FEATURE_METADATA})
  printf "\t|${FEATURE_DESCRIPTION}" >> ${TARGET}
  printf "\n" >> ${TARGET}
done

printf "|===\n" >> ${TARGET}

asciidoc -v ${TARGET} |& ccze -A -o nolookups && print_info "regenerated ${TARGET%.adoc}.html in $(format_timespan $(($(date +%s) - STARTTIME))), thanks."

# vim: sw=2 ts=2 et
